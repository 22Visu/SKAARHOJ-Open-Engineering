{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww13320\viewh19900\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\b\fs24 \cf0 HW Component types:
\b0 \
	0 = All\
	Binary inputs (buttons, GPI triggers); 1 [bit0]\
	Pulse inputs (encoders); 2 [bit 1]\
	Analog inputs (audio controls, sliders); 4 [bit 2]\
	Binary Outputs (GPOs,Bicolor LEDs); 8 [bit3]\
	Complex Outputs (Displays, VUs): 16 [bit4]\
	Complex inputs (Joystick); 32 [bit 5]\
\
	SmartSwitch Menus,  131\
	Char Display,  132\
	Graphical Display,  133\

\b \
Value List definitions\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0 	0 = (not used)\
	-int	 = reference to a value list\
	int = a list of values from 0 to int, inclusive\
	[-int, [string, string, \'85],string] = reference to value list, extra options as strings, final string is prefix string\
	[int, int] = value list from first int to last int\
	[int, int, [string, string, \'85], string] = value list from first int to last int, extra options as strings, final string is prefix string\
	[string, string, \'85, string] = value list from strings
\b \
\

\b0 	
\i There can be a max of 7 values
\i0\b \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\i\b0 \cf0 HW component -> State (possible states with fall back to normal behaviour) -> State Behaviour (a collection of device actions) -> Device Actions (includes function + values) -> dev/func + value(s)\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\i0\b \cf0 	\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0 TCP access to any function? or any button?\
\
\'97\'97\'97\'97\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0 C++:
\b0 \
// Per Controller Model:\
#define SK_HWCNUM 23\
#define SK_HWCFUNC 2	// Number of functions that can be selected for an input, 1-\
#define SK_SHIFTLEVELS 1	// Number of shift levels that can be selected for an input, 1-\
#define SK_PRESETS 1	// Number of preset banks in memory, 0- (+1 som er \'93current settings\'94)\
\
// EEPROM Memory consumptions is SK_HWCNUM * SK_HWCFUNC * SK_SHIFTLEVELS * (SK_PRESETS+1) * (bytes per function, 3?)\
\
uint16_t HWc_cfg[SK_HWCNUM][2] \{	// type, x, y\
	\{1,132,234\},\
	\expnd0\expndtw0\kerning0
\{1, 345,234\},\
	\{2, 456,234\}\kerning1\expnd0\expndtw0 \
\}\
char HWc_labels[SK_HWCNUM][10] \{	// label, 10 char, web interface\
	\'93CUT\'94,\
	\expnd0\expndtw0\kerning0
\'931|5\'94,\
	\'932|6\'94\kerning1\expnd0\expndtw0 \
\}\
uint8_t HWc_default \{\
\}	// Default settings, replicated to all presets, shift levels, functions are zero.\
\
uint8_t SK_MAP_buttons[8] = \{0,1,255,3,8,7,6,5\}	// Maps 7 buttons (could be BI8) to HWcomponents. Convention is that variable name is prefixed \'93SK_MAP_\'94\
uint8_t SK_MAP_SSWbuttons[8] = \{255,255,255,255,16,255,255,255\}	// Maps 1 SSW button. Since we use all 8 bytes, we can generate the mask from this array.\
\
\
\
\
\
\
\
\
}